@page "/critical-fail"

@using ViciousMockeryGenerator.Data;
@using ViciousMockeryGenerator.Data.Models;
@using ViciousMockeryGenerator.Extensions;
@inject CriticalFailService CriticalFailService;

<h1>Critical Fail</h1>
<div>
    <p style="font-size:small; color:gray;">
        Rats! Your player rolled a ONE!  Click on their damage-type to generate how they utterly fail.
    </p>
</div>
<hr/>
<div class="container">
    <div class="d-flex justify-content-center">
        <button class="btn btn-primary mr-4 mt-4 mb-4" @onclick="GenerateMelee">Melee Failure!</button>
        <button class="btn btn-primary m-4" @onclick="GenerateRanged">Ranged Failure!</button>
        <button class="btn btn-primary m-4" @onclick="GenerateSpell">Spell Failure!</button>
    </div>
    @if (string.IsNullOrEmpty(critFail.Description))
    {
        <div class="d-flex justify-content-center mt-3 mt-sm-3">
            <img src=@imagePath />
        </div>

    }
    @if (!string.IsNullOrWhiteSpace(critFail.Description))
    {
        @*<div class="d-flex justify-content-start mt-5 mt-sm-3">
                <h4>Roll: @critFail.Roll</h4>
            </div>*@
        <div class="d-flex justify-content-center mt-3 mt-sm-3">
            <img src=@imagePath />
        </div>
        <div class="d-flex justify-content-start">
            <h4>@critFail.FailureCategory.ToDescriptionString()!</h4>
        </div>
    }

    <div class="d-flex justify-content-start mt-5 mt-sm-3">
        <h6>@critFail.Description</h6>
    </div>
    <div class="d-flex justify-content-start mt-5 mt-sm-3">
        <p>@critFail.Comment</p>
    </div>
    <div class="mt-5 mt-sm-3">
        <p class="font-italic">Credit to Reddit user u/Archaias06 for this <a target="_blank" href="https://docs.google.com/spreadsheets/d/e/2PACX-1vT-TpNHenduO3SY3_subiyITGRPWu6zdobGPF6UAF4XWE0VNEyrW3h-FkZTzzb_86OWEVCNd8Yap_sG/pubhtml?gid=0&single=true&fbclid=IwAR1UDEZlCoKNYb4Fn9UlRP_8m7ExOQM5nG8MKgyHA-743pBnkMngqAWuK1o">resource</a>.</p>
    </div>
</div>

@code {

    private CriticalFailure critFail;
    private string imagePath;

    protected override async Task OnInitializedAsync()
    {
        imagePath = @"/images/fallen.png";
        critFail = await Task.FromResult(new CriticalFailure());
    }

    protected async Task GenerateMelee()
    {
        imagePath = @"/images/shortsword.png";
        critFail = await CriticalFailService.GetMelee();
    }

    protected async Task GenerateRanged()
    {
        imagePath = @"/images/longbow.png";
        critFail = await CriticalFailService.GetRanged();
    }

    protected async Task GenerateSpell()
    {
        imagePath = @"/images/spell.png";
        critFail = await CriticalFailService.GetSpell();
    }


}
