@page "/treasure-calculator"

@using ViciousMockeryGenerator.Data;
@using ViciousMockeryGenerator.Data.Models;
@inject TreasureCalulatorService TreasureCalculatorService;

<h1>Treasure Calculator</h1>
<p style="color: red">***This calculator is a work in progress***</p>
<hr />

@* TODO: Update theme*@
<div class="container">
    <EditForm Model="@treasure" OnValidSubmit="@HandleValidSubmit">
        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <p class="error-message">@treasure.Message</p>
        </div>
        <div class="form-group">
            <label for="calculationtype">Treasure Type:</label>
            <InputSelect @bind-Value="treasure.CalculationType" id="calculationtype" class="form-control">
                @foreach (var value in Enum.GetValues(typeof(CalculationType)))
                {
                    <option class="form-control">@value</option>
                }
            </InputSelect>
        </div>
        @foreach (var enemy in treasure.Enemies)
        {
            <div class="form-group">
                <label>Enemy @enemy.Id Challenge Rating:</label>
                <InputNumber @bind-Value="enemy.ChallengeRating" class="form-control" />
            </div>
            <div class="form-group">
                @if (treasure.Enemies.Count > 1 && enemy.Id > 1)
                {
                    <button id="btn-delete-enemy" type="button" @onclick="(() => DeleteEnemy(enemy))" class="btn btn-danger"><span class="oi oi-trash"></span></button>
                }
                @if (enemy.ChallengeRating > 0)
                {
                    <button id="btn-duplicate-enemy" type="button" @onclick="(() => DuplicateEnemy(enemy))" class="btn btn-info"><span class="oi oi-layers"></span></button>
                }
            </div>
        }
        <div class="form-group">
            @if (treasure.Enemies.Count < 20)
            {
                <button id="btn-add-enemy" type="button" @onclick="AddEnemy" class="btn btn-outline-info"><span class="oi oi-plus"></span> Add Enemy</button>
            }
            @*@if (treasure.Enemies.Last().ChallengeRating > 0)
            {
                <button id="btn-duplicate-enemy" type="button" @onclick="DuplicateEnemy" class="btn btn-outline-info">Duplicate Enemy</button>
            }*@
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Calculate Treasure</button>
            <button type="reset" @onclick="Reset" class="btn btn-danger">Clear Form</button>
        </div>
    </EditForm>
    <div class="row">
        <ul class="list-group-flush">
            @foreach (var coin in treasure.Treasure.Coins)
            {
                <li class="list-group-item">@coin.Total @coin.Metal</li>
            }
            @foreach (var artGem in treasure.Treasure.ArtGems)
            {
                <li class="list-group-item">@artGem.Count @artGem.OrnamentType objects for a total value of @artGem.TotalWorth.Total @artGem.TotalWorth.Metal</li>
            }
            @foreach (var magicItem in treasure.MagicItems)
            {
                <li class="list-group-item"><a href="@magicItem.Url" target="_blank">@magicItem.MagicItem</a></li>
            }
        </ul>
    </div>
</div>



@code {
    private TreasureViewModel treasure;

    protected override async Task OnInitializedAsync()
    {
        treasure = await Task.FromResult(new TreasureViewModel());
    }

    private async Task HandleValidSubmit()
    {
        var results = await TreasureCalculatorService.CalculateTreasure(treasure);
        treasure = results;
    }

    private void AddEnemy()
    {
        if (treasure.Enemies.Count < 20)
        {
            treasure.Enemies.Add(new Enemy() { Id = treasure.Enemies.Count + 1 });
        }
        else
        {
            treasure.Message = "Enemy limit reached.";
        }

    }

    private void DeleteEnemy(Enemy enemy)
    {
        treasure.Enemies.Remove(enemy);
    }

    private void DuplicateEnemy(Enemy enemy)
    {
        treasure.Enemies.Add(new Enemy {Id = treasure.Enemies.Last().Id + 1, ChallengeRating = enemy.ChallengeRating });
    }

    private void Reset()
    {
        treasure = new TreasureViewModel();
    }
}
